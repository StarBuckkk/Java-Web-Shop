<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
      PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
   "http://mybatis.org/dtd/mybatis-3-mapper.dtd"> <!-- 각 설정 파일은 src 패키지 아래에 위치해야 한다. -->

<mapper namespace="mapper.member"> <!-- 다른 파일의 SQL문과 구별하기 위해 mapper.member로 네임스페이스 지정 -->
	<resultMap id="memResult" type="memberVO">
		<result property="id" column="id" /> <!-- src 패키지 아래에 member.xml은 /mybatis/mappers 패키지에 위치 -->
        <result property="pwd" column="pwd" /> <!-- 레코드의 컬럼 이름에 대해 memberVO 같은 속성에 값을 설정 -->
        <result property="name" column="name" />
        <result property="email" column="email" />
        <result property="joinDate" column="joinDate" />
	</resultMap> 
	<!-- 
	<resultMap id="memResult" type="java.util.HashMap">
      <result property="id" column="id" />
      <result property="pwd" column="pwd" />
      <result property="name" column="name" />
      <result property="email" column="email" />
      <result property="joinDate" column="joinDate" />
   </resultMap> -->


	<select id="selectAllMemberList" resultMap="memResult"> <!-- DAO에서 id를 이용해 해당 SQL문을 호출하고 반환되는 레코드를 memResult에 저장-->
      <![CDATA[
         select * from t_member	order by joinDate desc	 	
      ]]>
	</select> <!-- SQL문의 >, <, <=, >= 같은 연산자들은 XML 파일에서 작성하면 연산자가 아닌 특수 문자로 인식하므로 오류 발생 -->
	<!-- 이러한 연산자들도 SQL문의 일부라는 것을 알려주기 위해 <![CDATA[ ... ]]> 태그로 작성해야 한다. -->

	<select id="selectName" resultType="String"> <!-- resultType 속성을 문자열로 지정해 SQL문으로 조회한 이름(문자열)을 호출한 메서드로 반환 -->
    <![CDATA[
	select name from t_member
	where id = 'hong'			
    ]]>
	</select>
	
	<select id="selectPwd" resultType="int" > <!-- resultType 속성을 int로 지정해 SQL문으로 조회한 정수를 호출한 메서드로 반환 -->
	  <![CDATA[ 
	    select pwd from t_member 
	    where id = 'hong'
	 ]]>
	 </select> 
	 
	<select id="selectMemberById" resultType="memberVO"  parameterType="String" > <!-- SQL문 호출 시 전달되는 매개변수의 데이터 타입을 지정 -->
      <![CDATA[
         select * from t_member
         where
         id=#{id}			
      ]]>
	 </select> <!-- MemberDAO에서 메서드를 호출하면서 parameterType으로 전달된 매개변수 이름을 select문의 id의 조건 값으로 사용 -->
	
	<select id="selectMemberByPwd" resultMap="memResult"  parameterType="int" >
      <![CDATA[
         select * from t_member
         where
         pwd = #{pwd}			
      ]]>
    </select> <!-- MemberDAO에서 메서드를 호출하면서 parameterType으로 전달된 매개변수 이름을 select문의 pwd의 조건 값으로 사용 -->
    
     <insert id="insertMember"  parameterType="memberVO"> <!-- MemberDAO에서 회원 정보를 memberVO의 속성에 저장해서 넘김 -->
		<![CDATA[
		 insert into t_member(id,pwd, name, email)
		 values(#{id}, #{pwd}, #{name}, #{email})
		]]>      
	</insert> <!-- memberVO의 속성 이름에 저장된 값을 value로 설정 -->
	
	<insert id="insertMember2"  parameterType="java.util.Map"> <!-- MemberDAO에서 회원 정보를 HashMap에 담아서 전달 -->
		<![CDATA[
			 insert into t_member(id,pwd, name, email)
			 values(#{id}, #{pwd}, #{name}, #{email})
		]]>      
   </insert> <!-- HashMap에 각각의 key로 저장된 value를 가져와 테이블에 추가 -->
   
   <update id="updateMember"  parameterType="memberVO"> <!-- MemberDAO에서 회원 정보를 memberVO의 빈에 설정해 전달 -->
     <![CDATA[
	     update t_member
	     set pwd=#{pwd}, name=#{name}, email=#{email}
	     where
	     id=#{id}
      ]]>      
   </update>  <!-- memberVO 빈의 속성 값을 각 컬럼의 수정 값으로 설정한 후 memberVO 빈의 id 속성 값을 조건 값으로 사용 -->
     
   <delete id="deleteMember"  parameterType="String"> <!-- 회원 id는 문자열이므로 parameterType을 String으로 설정 -->
	<![CDATA[
	   delete from  t_member
	   where
	   id=#{id}
	]]>      
  </delete> <!-- 전달된 id를 조건 값으로 해당 회원 정보를 삭제 -->
	
	
	<!-- 동적 SQL문 -->
	
  <select id="searchMember" parameterType="memberVO" resultMap="memResult">
      <![CDATA[
          select * from t_member
      ]]> <!-- 공통 SQL문 -->
      <where> <!-- <where> 태그를 이용해 SQL문의 where 절을 구성 -->
         <if test=" name != ''  and  name != null"> <!-- name 속성 값을 체크해 공백이 아니거나 null이 아니면 'name=name 속성 값' 조건절을 공통 SQL문 뒤에 추가 -->
            name=#{name}
         </if>
         <if test="email != ''  and email != null "> <!-- EMAIL 속성 값을 체크해 공백이 아니거나 null이 아니면 'email=email 속성 값' 구문을 공통 SQL문 뒤에 추가 -->
           and email = #{email}
         </if>
      </where>
      order by joinDate desc
  </select>
  
 <!--  
   <sql id="a"> // <sql> 태그를 이용해 공통 SQL문의 refid를 a로 지정
    <![CDATA[
      select * from t_member
     ]]> 
   </sql>  -->  
  
<!--    
  <select id="searchMember" parameterType="memberVO" resultMap="memResult">
	     <include refid="a" /> 
	   <![CDATA[
         select * from t_member 
      ]]>
	  
       <where>
		  <choose>
		      <when test="name != '' and name != null and  email != '' and email != null">
			     name=#{name} and email=#{email}
		      </when>
		      <when test="name != '' and name != null">
			     name = #{name}
		      </when>
		      <when test="email !='' and email != null">
			    email = #{email}
		      </when>
	      </choose>
       </where>
       order by joinDate desc
   </select> -->
   
   <select id="foreachSelect" resultMap="memResult" parameterType="java.util.Map"> <!-- SQL문에 List나 배열을 전달하면 자동으로 Map에 전달되어 이름을 key로 사용. List는 list를 키로 사용하고 배열은 array를 키로 사용 -->
      <!-- <include refid="a" /> <include> 태그를 이용해 공통 SQL문을 재사용 -->
      <![CDATA[
        select * from t_member 
          
      ]]>
      
      where name in
      <foreach item="item" collection="list" open="(" separator="," close=")" > <!-- 구분자로 , 사용 -->
         #{item}
      </foreach>
      order by joinDate desc
   </select>
   
   <insert id="foreachInsert"  parameterType="java.util.Map">
      <foreach item="item"  collection="list"   open="INSERT ALL" separator=" " close="SELECT * FROM DUAL" > <!-- <foreach>로 반복 작업을 할 때는 처음에 INSERT ALL을 추가, <foreach>로 반복 작업이 끝난 후 SELECT * FROM DUAL을 마지막에 추가 -->
          INTO  t_member(id, pwd, name, email)
          VALUES  (#{item.id},
                    #{item.pwd},
                    #{item.name},
                    #{item.email})
      </foreach> <!-- <foreach> 태그 안에 위치해야 한다. -->
   </insert>
   
	<!--  마이바티스에서 오라클 연동해 like 검색하는 방법 -->   
	<!-- 
    <select id="selectLike" resultMap="memResult"  parameterType="String" >
      <![CDATA[
         select * from t_member
         where
         name like '%'#{name}'%' // 이렇게 작성하면 실행 시 오류발생		
      ]]>
    </select>
     -->
   
	<!--  like 검색 -->
   <select id="selectLike" resultMap="memResult"  parameterType="String" >
      <![CDATA[
         select * from t_member
         where
         name like '%' || #{name} || '%'		
      ]]>
    </select> <!-- #{name} 앞에는 '%' || 를 붙임 그리고 뒤에는 || '%'를 붙임 -->
</mapper>